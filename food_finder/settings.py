"""
Django settings for food_finder project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
import environ


env = environ.Env()
environ.Env.read_env()
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure--p4mhhw%9dr(z6dw+ru7jpg2-w@)pvv#v2zmu)m!%n)y_su=+3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALLOWED_HOSTS = ['*',]
ALLOWED_HOSTS = ['.herokuapp.com', 'localhost', '127.0.0.1',]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'food_finder_app',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'django.contrib.sites',
    'whitenoise.runserver_nostatic',
    'address',
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

ROOT_URLCONF = 'food_finder.urls'

TEMPLATES = [
    {
        'NAME': 'django',
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
    {
        'NAME': 'login',
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
    },
]
ACCOUNT_EMAIL_VERIFICATION = "none"
#a07
#foodfinder

WSGI_APPLICATION = 'food_finder.wsgi.application'

LOGIN_URL = '/accounts/google/login/'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
# DATABASES = {'default': dj_database_url.config(default=os.environ.get('DATABASE_URL'))}
if 'DATABASE_URL' in os.environ:
    DATABASES = {'default': dj_database_url.config(default=os.environ.get('DATABASE_URL'))}
    GOOGLE_MAPS_API_KEY = (os.environ.get("GOOGLE_MAPS_API_KEY"))
    GOOGLE_API_KEY = (os.environ.get("GOOGLE_MAPS_API_KEY"))
else:
    DATABASE_URL = 'sqlite:///db.sqlite3'
    DATABASES = {'default': dj_database_url.config(default=DATABASE_URL)}
    GOOGLE_MAPS_API_KEY = env('GOOGLE_MAPS_API_KEY')
    GOOGLE_API_KEY = env('GOOGLE_MAPS_API_KEY')

# db_from_env = dj_database_url.config(conn_max_age=600)
# DATABASES['default'].update(db_from_env)

# GOOGLE_MAPS_API_KEY = env('GOOGLE_MAPS_API_KEY')
# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators



AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

SITE_ID = 2
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend'
]

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        "APP": {
            'client_id': '789531849926-2cqm44v5ebgh02csq37rb1mi0fobk629.apps.googleusercontent.com',
            'secret': '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',
        }
    }
}


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'EST'

USE_I18N = True

USE_TZ = True




# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
# STATIC_ROOT = os.path.join('static')
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

# DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# import django_heroku
# django_heroku.settings(locals())

# if 'DATABASE_URL' in os.environ:
#     import dj_database_url
#     DATABASES = {'default': dj_database_url.config()}
if 'DATABASE_URL' in os.environ:
    DATABASES = {'default': dj_database_url.config(default=os.environ.get('DATABASE_URL'))}
    GOOGLE_MAPS_API_KEY = (os.environ.get("GOOGLE_MAPS_API_KEY"))

else:
    DATABASE_URL = 'sqlite:///db.sqlite3'
    DATABASES = {'default': dj_database_url.config(default=DATABASE_URL)}
    GOOGLE_MAPS_API_KEY = env('GOOGLE_MAPS_API_KEY')
# if 'DATABASE_URL' in os.environ:
#     import dj_database_url
#     DATABASES = {'default': dj_database_url.config()}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }



# Activate Django-Heroku.
# Use this code to avoid the psycopg2 / django-heroku error!
# Do NOT import django-heroku above!
# try:
#     if 'HEROKU' in os.environ:
#         import django_heroku
#         django_heroku.settings(locals())
# except ImportError:
#     found = False
